#!/bin/bash

# 检查是否提供了目录参数
if [ $# -ne 1 ]; then
    echo "用法: $0 <目录路径>"
    exit 1
fi

# 获取目录路径
DIR="$1"

# 检查目录是否存在
if [ ! -d "$DIR" ]; then
    echo "错误: 目录 $DIR 不存在"
    exit 1
fi

# 输出文件
INDEX_FILE="$DIR/index.html"

# 清空或创建index.html文件
> "$INDEX_FILE"

# 开始写入index.html
echo "<!DOCTYPE html>" >> "$INDEX_FILE"
echo "<html lang=\"zh-CN\">" >> "$INDEX_FILE"
echo "<head>" >> "$INDEX_FILE"
echo "    <meta charset=\"UTF-8\">" >> "$INDEX_FILE"
echo "    <title>索引</title>" >> "$INDEX_FILE"
echo "</head>" >> "$INDEX_FILE"
echo "<body>" >> "$INDEX_FILE"
echo "<h1><a href=\"https://afoo.me\" target=\"_blank\">福强</a>新建索引</h1>" >> "$INDEX_FILE"
echo "<ul>" >> "$INDEX_FILE"

# *** 修改1: 移除 -maxdepth 1，允许递归搜索子目录 ***
# 查找目录及其子目录中的所有.html文件
find "$DIR" -type f -name "*.html" ! -path "$INDEX_FILE" -print0 | sort -z | while IFS= read -r -d '' file; do
    # 提取文件的title标签内容
    raw_title=$(grep -i -o '<title.*>.*</title>' "$file" | sed -e 's/<title.*>\(.*\)<\/title>/\1/' | head -n 1)

    # *** 修改2: 处理相对路径用于链接和显示 ***
    # 从完整路径中获取相对于$DIR的路径，用于href属性
    relative_path=${file#"$DIR/"}

    # 从相对路径中获取不带扩展名的部分，用于显示
    # 为了更清晰，将路径中的'/'替换为' - '
    display_prefix=$(echo "${relative_path%.html}" | tr '/' ' - ')
    
    # 如果title不为空，则处理
    if [ -n "$raw_title" ]; then
        # 去除标题内容的前后空格
        processed_title=$(echo "$raw_title" | sed 's/^[ \t]*//;s/[ \t]*$//')
    else
        # 如果title为空，使用处理过的文件路径作为默认标题
        processed_title="$display_prefix"
    fi
    
    # 将处理后的文件路径和页面标题拼接起来
    display_title="$display_prefix - $processed_title"

    # 写入index.html的列表项
    echo "    <li><a href=\"$relative_path\" target=\"_blank\">$display_title</a></li>" >> "$INDEX_FILE"
done

# 结束HTML文件
echo "</ul>" >> "$INDEX_FILE"
echo "</body>" >> "$INDEX_FILE"
echo "</html>" >> "$INDEX_FILE"

echo "已生成 $INDEX_FILE"
